#
# Cmake configuration file
#

############################# INITIAL SECTION ##########################
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.4 FATAL_ERROR)

PROJECT(ssdpd C)

SET(SSDPD_VERSION_MAJOR 1)
SET(SSDPD_VERSION_MINOR 07)
SET(SSDPD_VERSION_PATCH 0)

SET(PACKAGE_NAME		"${PROJECT_NAME}")
SET(PACKAGE_VERSION		"${SSDPD_VERSION_MAJOR}.${SSDPD_VERSION_MINOR}.${SSDPD_VERSION_PATCH}")
SET(PACKAGE_URL			"https://github.com/rozhuk-im/ssdpd")
SET(PACKAGE_BUGREPORT		"https://github.com/rozhuk-im/ssdpd")
SET(PACKAGE_STRING 		"${PACKAGE_NAME} ${PACKAGE_VERSION}")
SET(PACKAGE_DESCRIPTION		"SSDP announce daemon for UPnP 1.1")
SET(PACKAGE_TARNAME		"${PACKAGE_NAME}-${PACKAGE_VERSION}")

############################# OPTIONS SECTION ##########################

IF(NOT LOCAL_CONFDIR)
	SET(LOCAL_CONFDIR "${CONFDIR}")
ENDIF(NOT LOCAL_CONFDIR)

############################# INCLUDE SECTION ##########################

INCLUDE(CheckIncludeFiles)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckSymbolExists)
INCLUDE(CheckCSourceCompiles)
INCLUDE(CheckCSourceRuns)
INCLUDE(CheckLibraryExists)
INCLUDE(CheckCCompilerFlag)
INCLUDE(CMakeParseArguments)

FIND_PACKAGE(PkgConfig REQUIRED)
SET(THREADS_PREFER_PTHREAD_FLAG ON)
FIND_PACKAGE(Threads REQUIRED)
LIST(APPEND CMAKE_REQUIRED_LIBRARIES ${CMAKE_THREAD_LIBS_INIT})
############################# MACRO SECTION ############################


############################# CONFIG SECTION ###########################
# Initial set

# Prefer local include dirs to system ones
INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}/"
		"${CMAKE_SOURCE_DIR}/src"
		"${CMAKE_SOURCE_DIR}/src/liblcb/include"
		"${CMAKE_BINARY_DIR}/src")

IF(CMAKE_INSTALL_PREFIX)
	SET(PREFIX 	${CMAKE_INSTALL_PREFIX})
ENDIF(CMAKE_INSTALL_PREFIX)


SET(TAR "tar")

# Platform specific configuration
IF(CMAKE_SYSTEM_NAME MATCHES "^.*BSD$|DragonFly")
	ADD_DEFINITIONS(-DFREEBSD -D_BSD_SOURCE)
	MESSAGE(STATUS "Configuring for BSD system")
	SET(TAR "gtar")
ENDIF()

IF(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_BSD_SOURCE -DDARWIN")
	MESSAGE(STATUS "Configuring for Darwin")
	SET(TAR "gnutar")
	SET(CMAKE_FIND_FRAMEWORK "NEVER")
ENDIF(CMAKE_SYSTEM_NAME STREQUAL "Darwin")


IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_GNU_SOURCE")
	ADD_DEFINITIONS(-D_GNU_SOURCE -DLINUX)
	IF(BUILD_CPU_MODE STREQUAL "32")
		ADD_DEFINITIONS(-D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE)
	ENDIF(BUILD_CPU_MODE STREQUAL "32")

	LIST(APPEND CMAKE_REQUIRED_LIBRARIES rt)
ENDIF(CMAKE_SYSTEM_NAME STREQUAL "Linux")


# Process with warn flags
SET(CMAKE_C_WARN_FLAGS "")
CHECK_C_COMPILER_FLAG(-Wall			SUPPORT_WALL)
CHECK_C_COMPILER_FLAG(-W			SUPPORT_W)
CHECK_C_COMPILER_FLAG(-Wpointer-arith		SUPPORT_WPOINTER)
CHECK_C_COMPILER_FLAG(-Wno-unused-parameter	SUPPORT_WPARAM)
CHECK_C_COMPILER_FLAG(-Wno-unused-function	SUPPORT_WFUNCTION)
CHECK_C_COMPILER_FLAG(-Wunused-variable		SUPPORT_WUNUSED_VAR)
CHECK_C_COMPILER_FLAG(-Wno-pointer-sign		SUPPORT_WPOINTER_SIGN)
CHECK_C_COMPILER_FLAG(-Wno-sign-compare		SUPPORT_WSIGN_COMPARE)
CHECK_C_COMPILER_FLAG(-Wstrict-prototypes	SUPPORT_WSTRICT_PROTOTYPES)
CHECK_C_COMPILER_FLAG(-pedantic			SUPPORT_PEDANTIC_FLAG)
CHECK_C_COMPILER_FLAG(-Wno-unused-const-variable SUPPORT_WNO_UNUSED_CONST)
# GCC 6 specific
CHECK_C_COMPILER_FLAG(-Wnull-dereference	SUPPORT_WNULL_DEREFERENCE)
CHECK_C_COMPILER_FLAG(-Wduplicated-cond		SUPPORT_WDUPLICATED_COND)
# GCC 7 specific
CHECK_C_COMPILER_FLAG(-Wimplicit-fallthrough	SUPPORT_WIMPLICIT_FALLTHROUGH)

IF(NOT "${CMAKE_C_COMPILER_ID}" MATCHES SunPro)
	CHECK_C_COMPILER_FLAG("-std=c11"	SUPPORT_STD11_FLAG)
	CHECK_C_COMPILER_FLAG("-std=c99"	SUPPORT_STD99_FLAG)
ENDIF(NOT "${CMAKE_C_COMPILER_ID}" MATCHES SunPro)
IF(SUPPORT_W)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -W")
ENDIF(SUPPORT_W)
IF(SUPPORT_WALL)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wall")
ENDIF(SUPPORT_WALL)
IF(SUPPORT_WPOINTER)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wpointer-arith")
ENDIF(SUPPORT_WPOINTER)
IF(SUPPORT_WPARAM)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wno-unused-parameter")
ENDIF(SUPPORT_WPARAM)
IF(SUPPORT_WFUNCTION)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wno-unused-function")
ENDIF(SUPPORT_WFUNCTION)
IF(SUPPORT_WUNUSED_VAR)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wunused-variable")
ENDIF(SUPPORT_WUNUSED_VAR)
IF(SUPPORT_WPOINTER_SIGN)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wno-pointer-sign")
ENDIF(SUPPORT_WPOINTER_SIGN)
IF(SUPPORT_WSTRICT_PROTOTYPES)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wstrict-prototypes")
ENDIF(SUPPORT_WSTRICT_PROTOTYPES)
#IF(SUPPORT_PEDANTIC_FLAG)
#	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -pedantic")
#ENDIF(SUPPORT_PEDANTIC_FLAG)
IF(SUPPORT_WNULL_DEREFERENCE)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wnull-dereference")
ENDIF()
IF(SUPPORT_WDUPLICATED_COND)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wduplicated-cond")
ENDIF()
IF(SUPPORT_WLOGICAL_OP)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wlogical-op")
ENDIF()
IF(SUPPORT_WNO_UNUSED_CONST)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wno-unused-const-variable")
ENDIF()
IF(SUPPORT_WSIGN_COMPARE)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wno-sign-compare")
ENDIF()
IF(SUPPORT_STD11_FLAG)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -std=c11")
ELSE(SUPPORT_STD11_FLAG)
	IF(SUPPORT_STD99_FLAG)
		SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -std=c99")
	ENDIF(SUPPORT_STD99_FLAG)
ENDIF(SUPPORT_STD11_FLAG)
IF(SUPPORT_WIMPLICIT_FALLTHROUGH)
	SET(CMAKE_C_WARN_FLAGS "${CMAKE_C_WARN_FLAGS} -Wno-implicit-fallthrough")
ENDIF(SUPPORT_WIMPLICIT_FALLTHROUGH)

CHECK_C_COMPILER_FLAG(-fPIC			SUPPORT_FPIC)
IF(SUPPORT_FPIC)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
ENDIF(SUPPORT_FPIC)

# Optimization flags
IF(NOT CMAKE_C_OPT_FLAGS)
	IF(ENABLE_OPTIMIZATION MATCHES "ON")
	CHECK_C_COMPILER_FLAG(-flto SUPPORT_FLTO)
	IF(SUPPORT_FLTO)
		IF(NOT CMAKE_GCC_AR OR NOT CMAKE_GCC_RANLIB)
			FIND_PROGRAM(CMAKE_GCC_AR NAMES "gcc-ar")
			FIND_PROGRAM(CMAKE_GCC_RANLIB NAMES "gcc-ranlib")
			MARK_AS_ADVANCED(CMAKE_GCC_AR CMAKE_GCC_RANLIB)
		ENDIF()
		IF(CMAKE_GCC_AR AND CMAKE_GCC_RANLIB)
			SET(CMAKE_C_OPT_FLAGS "-g -O3 -fstrict-aliasing -flto")
			SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto")
			SET(CMAKE_C_ARCHIVE_CREATE "${CMAKE_GCC_AR} cr <TARGET> <LINK_FLAGS> <OBJECTS>")
			SET(CMAKE_C_ARCHIVE_APPEND "${CMAKE_GCC_AR} r <TARGET> <LINK_FLAGS> <OBJECTS>")
			SET(CMAKE_C_ARCHIVE_FINISH "${CMAKE_GCC_RANLIB} <TARGET>")
			SET(CMAKE_CXX_ARCHIVE_CREATE "${CMAKE_GCC_AR} cr <TARGET> <LINK_FLAGS> <OBJECTS>")
			SET(CMAKE_CXX_ARCHIVE_APPEND "${CMAKE_GCC_AR} r <TARGET> <LINK_FLAGS> <OBJECTS>")
			SET(CMAKE_CXX_ARCHIVE_FINISH "${CMAKE_GCC_RANLIB} <TARGET>")
		ENDIF()
	ELSE()
		SET(CMAKE_C_OPT_FLAGS "-g -O3 -fstrict-aliasing")
	ENDIF()
	ELSE(ENABLE_OPTIMIZATION MATCHES "ON")
		IF(ENABLE_FULL_DEBUG MATCHES "ON")
			SET(CMAKE_C_OPT_FLAGS "-g -O0 -fstrict-aliasing")
		ELSE(ENABLE_FULL_DEBUG MATCHES "ON")
			SET(CMAKE_C_OPT_FLAGS "-g -O2 -fstrict-aliasing")
		ENDIF(ENABLE_FULL_DEBUG MATCHES "ON")
	ENDIF(ENABLE_OPTIMIZATION MATCHES "ON")
ENDIF(NOT CMAKE_C_OPT_FLAGS)

IF(ENABLE_COVERAGE)
	SET(CMAKE_C_OPT_FLAGS "-g -O0 -fno-strict-aliasing")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --coverage")
	SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --coverage")
ENDIF(ENABLE_COVERAGE)

SET(CMAKE_C_FLAGS "${CMAKE_C_OPT_FLAGS} ${CMAKE_C_FLAGS} ${CMAKE_C_WARN_FLAGS}")

ADD_DEFINITIONS(-DHAVE_CONFIG_H)

# Check platform specific includes
CHECK_INCLUDE_FILES(sys/types.h			HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILES(sys/time.h			HAVE_SYS_TIME_H)

# Check platform API
CHECK_FUNCTION_EXISTS(memset_s			HAVE_MEMSET_S)
CHECK_FUNCTION_EXISTS(explicit_bzero		HAVE_EXPLICIT_BZERO)
CHECK_FUNCTION_EXISTS(reallocarray		HAVE_REALLOCARRAY)
CHECK_FUNCTION_EXISTS(pipe2			HAVE_PIPE2)
CHECK_FUNCTION_EXISTS(accept4			HAVE_ACCEPT4)

# Check macros
CHECK_SYMBOL_EXISTS(PATH_MAX	limits.h	HAVE_PATH_MAX)
CHECK_SYMBOL_EXISTS(MAXPATHLEN	sys/param.h	HAVE_MAXPATHLEN)
CHECK_SYMBOL_EXISTS(SOCK_NONBLOCK sys/socket.h	HAVE_SOCK_NONBLOCK)

IF(NOT DESTDIR)
	SET(DESTDIR $ENV{DESTDIR})
ENDIF(NOT DESTDIR)

################################ SUBDIRS SECTION #######################

LIST(APPEND SSDPD_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES}")

ADD_SUBDIRECTORY(src)

############################ TARGETS SECTION ###########################

CONFIGURE_FILE(config.h.in src/config.h)
ADD_DEFINITIONS("HAVE_CONFIG_H")

##################### INSTALLATION #####################################

# Binaries

ADD_CUSTOM_TARGET(dist ${CMAKE_SOURCE_DIR}/dist.sh
	"${CMAKE_BINARY_DIR}/${PACKAGE_TARNAME}.tar.xz" "${TAR}"
	COMMENT "Create source distribution"
	WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

